#MODEL TRAINIG:

# Modelo usando Elastic Net, escogiendo los hiperparámetros usando cross validación
ctrl<- trainControl(method = "cv",
                    number = 5,
                    classProbs = TRUE,
                    savePredictions = T)

# Defino la ecuacion de mi primer modelo:
formmodelo1=Pobre~Nper+num_ocupados+arrienda+maxEducLevel+Jefe_H_mujer+Jefe_desocupado+Jefe_regimen_salud+Jefe_Tipo_primer_empleo+Jefe_segundo_empleo

p_load(Metrics)
fiveStats <- function(...)  c(prSummary(...))  


ctrl<- trainControl(method = "cv",
                    number = 5,
                    classProbs = TRUE,
                    summaryFunction = fiveStats,
                    savePredictions = T)

# install.packages("MLmetrics")
# require(MLmetrics)

set.seed(098063)
model1 <- train(formmodelo1,
                data=TRAIN,
                metric = "F",
                method = "glmnet",
                trControl = ctrl,
                preProcess = c("center", "scale"),  # Normaliza variables predictoras
                family="binomial",
                tuneGrid=expand.grid(
                  alpha = seq(0,1,by=.5),
                  lambda =10^seq(-1, -3, length = 10)
                )
                
)
model1

model1$bestTune

##-----------------------------------------------------------------------------##
# Recupero antes del envio la matriz de confusion y el desempeño en el train set:

# Creación de la matriz de confusión:
predicciones <- predict(model1, newdata = TRAIN, type = "raw")
predicciones <- factor(predicciones, levels = c("No", "Yes"))
TRAIN$Pobre <- factor(TRAIN$Pobre, levels = c("No", "Yes"))

cm_model1 <- confusionMatrix(predicciones, TRAIN$Pobre, positive = "Yes")
cm_model1

# guardo en un data frame
df_ELNET <- data.frame(
  Model = "model1",
  F1_Score = cm_model1$byClass["F1"]
  )

#  Elimino los nombres de las filas que no informan nada.
rownames(df_ELNET)<-NULL
df_ELNET

##-----------------------------------------------------------------------------##
# Preparacion para el envio a Kaggle:

predictSample <- TEST   %>% 
  mutate(pobre_lab = predict(model1, newdata = TEST, type = "raw")    ## predicted class labels
  )  %>% select(id,pobre_lab)

head(predictSample)


predictSample<- predictSample %>% 
  mutate(pobre=ifelse(pobre_lab=="Yes",1,0)) %>% 
  select(id,pobre)
head(predictSample)  

##-----------------------------------------------------------------------------##


# Replace '.' with '_' in the numeric values converted to strings
lambda_str <- gsub(
  "\\.", "_", 
  as.character(round(model1$bestTune$lambda, 4)))
alpha_str <- gsub("\\.", "_", as.character(model1$bestTune$alpha))

name<- paste0(
  "EN_lambda_", lambda_str,
  "_alpha_" , alpha_str, 
  ".csv") 

write.csv(predictSample,name, row.names = FALSE)
